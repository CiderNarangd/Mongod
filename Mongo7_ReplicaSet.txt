Mongo Replica Set 구성

//대상 호스트
mongo1 - 59.11.230.189  -> Primary
mongo2 - 59.11.230.235
mongo3 - 175.214.6.71

port - 27017
-> 전부 다른 호스트에서 진행하기에 포트명 변경하지 않았음.

//호스트명 변경
hostnamectl set-hostname mongo1
hostnamectl set-hostname mongo2
hostnamectl set-hostname mongo3

//host명 수정 (호스트 전부)
vi /etc/hosts
59.11.230.189 mongo1
59.11.230.235 mongo2
175.214.6.71 mongo3

//방화벽 해제 
systemctl stop firewalld
systemctl disable firewalld

//설정파일 변경
vi /etc/mongod.conf
-> 아래 항목 추가
=============================

replication:
  replSetName: rs0
  
==============================

reboot


// Replica Set 초기화 (Primary 호스트에서만 진행)
rs.initiate({
  _id: "rs0",
  members: [
    { _id: 0, host: "mongo1:27017", priority: 3 },
    { _id: 1, host: "mongo2:27017", priority: 2 },
    { _id: 2, host: "mongo3:27017", priority: 1 }
  ]
})

-->{ ok: 1 } 설정 확인


// status 명령어로 적용 잘되었는지 확인
rs0 [direct: other] test> rs.status()
{
  set: 'rs0',
  date: ISODate('2025-06-04T07:43:15.659Z'),
  myState: 1,
  term: Long('2'),
  syncSourceHost: '',
  syncSourceId: -1,
  heartbeatIntervalMillis: Long('2000'),
  majorityVoteCount: 2,
  writeMajorityCount: 2,
  votingMembersCount: 3,
  writableVotingMembersCount: 3,
  optimes: {
    lastCommittedOpTime: { ts: Timestamp({ t: 1749022988, i: 1 }), t: Long('2') },
    lastCommittedWallTime: ISODate('2025-06-04T07:43:08.535Z'),
    readConcernMajorityOpTime: { ts: Timestamp({ t: 1749022988, i: 1 }), t: Long('2') },
    appliedOpTime: { ts: Timestamp({ t: 1749022988, i: 1 }), t: Long('2') },
    durableOpTime: { ts: Timestamp({ t: 1749022988, i: 1 }), t: Long('2') },
    lastAppliedWallTime: ISODate('2025-06-04T07:43:08.535Z'),
    lastDurableWallTime: ISODate('2025-06-04T07:43:08.535Z')
  },
  lastStableRecoveryTimestamp: Timestamp({ t: 1749022955, i: 1 }),
  electionCandidateMetrics: {
    lastElectionReason: 'priorityTakeover',
    lastElectionDate: ISODate('2025-06-04T07:42:58.526Z'),
    electionTerm: Long('2'),
    lastCommittedOpTimeAtElection: { ts: Timestamp({ t: 1749022967, i: 22 }), t: Long('1') },
    lastSeenOpTimeAtElection: { ts: Timestamp({ t: 1749022967, i: 22 }), t: Long('1') },
    numVotesNeeded: 2,
    priorityAtElection: 3,
    electionTimeoutMillis: Long('10000'),
    priorPrimaryMemberId: 2,
    numCatchUpOps: Long('0'),
    newTermStartDate: ISODate('2025-06-04T07:42:58.534Z'),
    wMajorityWriteAvailabilityDate: ISODate('2025-06-04T07:42:58.547Z')
  },
  electionParticipantMetrics: {
    votedForCandidate: true,
    electionTerm: Long('1'),
    lastVoteDate: ISODate('2025-06-04T07:42:47.156Z'),
    electionCandidateMemberId: 2,
    voteReason: '',
    lastAppliedOpTimeAtElection: { ts: Timestamp({ t: 1749022955, i: 1 }), t: Long('-1') },
    maxAppliedOpTimeInSet: { ts: Timestamp({ t: 1749022955, i: 1 }), t: Long('-1') },
    priorityAtElection: 3
  },
  members: [
    {
      _id: 0,
      name: 'mongo1:27017',
      health: 1,
      state: 1,
      stateStr: 'PRIMARY',
      uptime: 791,
      optime: { ts: Timestamp({ t: 1749022988, i: 1 }), t: Long('2') },
      optimeDate: ISODate('2025-06-04T07:43:08.000Z'),
      lastAppliedWallTime: ISODate('2025-06-04T07:43:08.535Z'),
      lastDurableWallTime: ISODate('2025-06-04T07:43:08.535Z'),
      syncSourceHost: '',
      syncSourceId: -1,
      infoMessage: '',
      electionTime: Timestamp({ t: 1749022978, i: 1 }),
      electionDate: ISODate('2025-06-04T07:42:58.000Z'),
      configVersion: 1,
      configTerm: 2,
      self: true,
      lastHeartbeatMessage: ''
    },
    {
      _id: 1,
      name: 'mongo2:27017',
      health: 1,
      state: 2,
      stateStr: 'SECONDARY',
      uptime: 39,
      optime: { ts: Timestamp({ t: 1749022988, i: 1 }), t: Long('2') },
      optimeDurable: { ts: Timestamp({ t: 1749022988, i: 1 }), t: Long('2') },
      optimeDate: ISODate('2025-06-04T07:43:08.000Z'),
      optimeDurableDate: ISODate('2025-06-04T07:43:08.000Z'),
      lastAppliedWallTime: ISODate('2025-06-04T07:43:08.535Z'),
      lastDurableWallTime: ISODate('2025-06-04T07:43:08.535Z'),
      lastHeartbeat: ISODate('2025-06-04T07:43:14.538Z'),
      lastHeartbeatRecv: ISODate('2025-06-04T07:43:14.545Z'),
      pingMs: Long('0'),
      lastHeartbeatMessage: '',
      syncSourceHost: 'mongo3:27017',
      syncSourceId: 2,
      infoMessage: '',
      configVersion: 1,
      configTerm: 2
    },
    {
      _id: 2,
      name: 'mongo3:27017',
      health: 1,
      state: 2,
      stateStr: 'SECONDARY',
      uptime: 39,
      optime: { ts: Timestamp({ t: 1749022988, i: 1 }), t: Long('2') },
      optimeDurable: { ts: Timestamp({ t: 1749022988, i: 1 }), t: Long('2') },
      optimeDate: ISODate('2025-06-04T07:43:08.000Z'),
      optimeDurableDate: ISODate('2025-06-04T07:43:08.000Z'),
      lastAppliedWallTime: ISODate('2025-06-04T07:43:08.535Z'),
      lastDurableWallTime: ISODate('2025-06-04T07:43:08.535Z'),
      lastHeartbeat: ISODate('2025-06-04T07:43:14.552Z'),
      lastHeartbeatRecv: ISODate('2025-06-04T07:43:15.051Z'),
      pingMs: Long('1'),
      lastHeartbeatMessage: '',
      syncSourceHost: 'mongo1:27017',
      syncSourceId: 0,
      infoMessage: '',
      configVersion: 1,
      configTerm: 2
    }
  ],
  ok: 1,
  '$clusterTime': {
    clusterTime: Timestamp({ t: 1749022988, i: 1 }),
    signature: {
      hash: Binary.createFromBase64('AAAAAAAAAAAAAAAAAAAAAAAAAAA=', 0),
      keyId: Long('0')
    }
  },
  operationTime: Timestamp({ t: 1749022988, i: 1 })
}



데이터베이스 및 콜렉션 생성

//Primary
use repl_test;
db.createCollection("dbs");
db.dbs.insert({"name":"mysql" , "type":"RDBMS"});
db.dbs.insert({"name":"mssql" , "type":"RDBMS"});
db.dbs.insert({"name":"redis" , "type":"keyvalue"});


// Secondary Node에서 동기화 확인
rs0 [direct: secondary] repl_test> db.dbs.find().pretty()
[
  {
    _id: ObjectId('683ffb04f419e0f7bbc59f35'),
    name: 'mysql',
    type: 'RDBMS'
  },
  {
    _id: ObjectId('683ffb0ef419e0f7bbc59f36'),
    name: 'mssql',
    type: 'RDBMS'
  },
  {
    _id: ObjectId('683ffb11f419e0f7bbc59f37'),
    name: 'redis',
    type: 'keyvalue'
  }
]

MongoConnect.py 테스트용 파이썬 스크립트 작성후 테스트

-- mongo1 Primary 호스트 강제 종료후 mongo2 호스트가 자동으로  Primary 승격 확인.
-- 어플리케이션에서도 자동으로 primary호스트로 재연결 확인.

